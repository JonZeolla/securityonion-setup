#!/bin/bash
#
# Copyright (C) 2012 Security Onion
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

#########################################
# Variables
#########################################
DEBUG="0"
LOGDIR=/var/log/nsm
LOG=$LOGDIR/sosetup-network.log
HOSTNAME=`hostname`
TITLE="Security Onion Setup ($HOSTNAME)"

#########################################
# Check if we've already run
#########################################
if grep "Security Onion" /etc/network/interfaces >/dev/null 2>&1; then
	TEXT='It looks like /etc/network/interfaces has already been configured by this script.\n\nWould you like to re-configure /etc/network/interfaces now?'
	YES='Yes, re-configure /etc/network/interfaces!'
	NO='No, do not change /etc/network/interfaces.'
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
	    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
	    exit
	else
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
	fi
else
	# First-time user.  Ask if they want to continue.
	TEXT='Would you like to configure /etc/network/interfaces now?\
\
If you choose NO, you should manually configure your management and monitored interfaces\
per the instructions on the Security Onion Wiki located at:\n\
http://code.google.com/p/security-onion/wiki/NetworkConfiguration'
	YES='Yes, configure /etc/network/interfaces!'
	NO='No, not right now.'
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
	    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
	    exit
	else
	    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
	fi
fi

#########################################
# Choose management interface
#########################################
# Get a list of all possible interfaces
MGMT_INTERFACE=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | 
	awk '{print $1}' | cut -d\: -f1 | sort `
# If there's only one interface, then MGMT_INTERFACE will have the right one
# Otherwise, let the user select
NUM_MGMT_INTERFACES=0
for i in `echo $MGMT_INTERFACE`; do
	let NUM_MGMT_INTERFACES=NUM_MGMT_INTERFACES+1
done

if [ $NUM_MGMT_INTERFACES -eq 0 ]; then
	zenity --error --text="No interfaces found!"
	exit
elif [ $NUM_MGMT_INTERFACES -gt 1 ]; then
	TEXT='Which network interface should be the management interface?'
	MGMT_INTERFACE=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | 
		awk '{print $1}' | cut -d\: -f1 | sort | zenity --list --column="Interface" --hide-header --title="$TITLE" --text="$TEXT" 2>/dev/null`
	if [ "$MGMT_INTERFACE" = "" ]; then
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
		exit
	fi
fi

#########################################
# Choose static or DHCP configuration for management interface
#########################################
TEXT="Should $MGMT_INTERFACE use DHCP or static addressing (highly recommended)?"
MGMT_CONFIG_TYPE=`zenity --list \
        --title="$TITLE" \
        --column="" static DHCP --hide-header --text="$TEXT"`

# Define a function to validate IP addresses    
 is_ip() {
            case "$*" in
                ""|*[!0-9.]*) return 1 ;;
            esac
            oldIFS=$IFS
            IFS='.'
            set -- $*
            IFS=$oldIFS
            [ $# -eq 4 ] || return 1
            for ipseg in $1 $2 $3 $4
              do
              case $ipseg in
                  *[!0-9]*) return 1 ;;
              esac
              [ $ipseg -le 255 ] || return 1
            done
         }

if [ "$MGMT_CONFIG_TYPE" = "DHCP" ]; then
	MANAGEMENT_TEXT="Configure the management interface $MGMT_INTERFACE using DHCP."
else
	# Obtain network settings for management interface 
	# Enter static management IP address
	VALID="no"
        while [ $VALID = "no" ]; do
		TEXT="Enter a static IP address for your management interface (e.g., 192.168.1.100):"
		ADDRESS=`zenity --title="$TITLE" --text="$TEXT" --entry`
		if [ "$ADDRESS" = "" ]; then
			[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
		        exit
		fi
	is_ip $ADDRESS && VALID="yes"
	done
          
	# Enter subnet mask
	VALID="no"
        while [ $VALID = "no" ]; do
	TEXT="Enter your network's subnet mask (e.g., 255.255.255.0):"
	NETMASK=`zenity --title="$TITLE" --text="$TEXT" --entry`
	if [ "$NETMASK" = "" ]; then
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
	        exit
	fi
	is_ip $NETMASK && VALID="yes"
	done

	# Enter gateway IP address
	VALID="no"
        while [ $VALID = "no" ]; do
	TEXT="Enter your gateway's IP address (e.g., 192.168.1.1):"
	GATEWAY=`zenity --title="$TITLE" --text="$TEXT" --entry`
	if [ "$GATEWAY" = "" ]; then
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
        	exit
	fi
	is_ip $GATEWAY && VALID="yes"
	done
          
        # Enter DNS server address
	VALID="no"
        while [ $VALID = "no" ]; do
        	TEXT="Enter one or more DNS server IP addresses, separated by spaces:\n"
          	NAMESERVER=`zenity --title="$TITLE" --text="$TEXT" --entry`
          	if [ "$NAMESERVER" = "" ]; then
            		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
            		exit
          	fi
		VALID="yes"
		for i in `echo $NAMESERVER`; do
			is_ip $i || VALID="no"
		done
	done
          
	MANAGEMENT_TEXT="Configure the management interface $MGMT_INTERFACE as follows: \n\
          Set static IP address of $ADDRESS \n\
          Set the gateway IP address to $GATEWAY \n\
          Set the network mask to $NETMASK \n\
          Set the DNS server(s) to $NAMESERVER"
fi

#########################################
# Sniffing interfaces
#########################################
MON_INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | 
	awk '{print $1}' | cut -d\: -f1 | sort |sed "s|$MGMT_INTERFACE||g"`

NUM_MON_INTERFACES=0
for i in `echo $MON_INTERFACES`; do
	let NUM_MON_INTERFACES=NUM_MON_INTERFACES+1
done

SNIFF_TEXT=""
if [ $NUM_MON_INTERFACES -gt 0 ]; then
	TEXT='Please select any additional interfaces that will be used for sniffing.'
	INPUT=`for i in $MON_INTERFACES; do echo -n "FALSE $i "; done`
	MON_INTERFACES=`zenity --list --checklist --column "Enabled" --column "Interface" --hide-header --title="$TITLE" --text="$TEXT" $INPUT |sed 's/|/ /g'`
	if [ "$MON_INTERFACES" = "" ]; then
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
		exit
	fi
	SNIFF_TEXT="    - Configure the following interface(s) for sniffing:\n\
      $MON_INTERFACES"
fi

#########################################
# Confirmation dialog box
#########################################
TEXT="We're about to do the following:\n\
    - Backup existing network configuration to /etc/network/interfaces.bak \n\
    - $MANAGEMENT_TEXT \n\
$SNIFF_TEXT \n\
    - REBOOT
    \n\
    After rebooting, you'll need to run Setup again to complete the Setup process.\n\
    \n\
    We're about to make changes to your system! \n\
    \n\
    Would you like to continue?"

YES="Yes, make changes and reboot!"
NO="No, do not make changes!"
zenity --question --no-wrap --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO"
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No. Do not proceed."
        exit
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes to proceed with all changes."
fi

#########################################
# Make changes
#########################################

# Create the log directory
mkdir -p $LOGDIR

# Stop Network Manager, if it exists (i.e., running Ubuntu Desktop rather than Ubuntu Server), 
# and prevent it from starting on reboot
if [ -e "/etc/init.d/network-manager" ]; then
  /etc/init.d/network-manager stop >> $LOG 2>&1
  [ -f /etc/init/network-manager.conf ] && mv /etc/init/network-manager.conf /etc/init/network-manager.conf.DISABLED
fi

# Write new network interface configuration file
FILE=/etc/network/interfaces

# Backup existing network interface configuration first
cp $FILE /etc/network/interfaces.bak

cat << EOF > $FILE
# This configuration was created by the Security Onion setup script.  The original network
# interface configuration file was backed up to /etc/networking/interfaces.bak.
   
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# loopback network interface
auto lo
iface lo inet loopback

EOF
    
if [ "$MGMT_CONFIG_TYPE" = "DHCP" ]; then

cat << EOF >> $FILE
# Management network interface
auto $MGMT_INTERFACE
iface $MGMT_INTERFACE inet dhcp
  post-up for i in rx tx sg tso ufo gso gro lro; do ethtool -K \$IFACE \$i off; done

EOF

else

cat << EOF >> $FILE
# Management network interface
auto $MGMT_INTERFACE
iface $MGMT_INTERFACE inet static
  address $ADDRESS
  gateway $GATEWAY
  netmask $NETMASK
  dns-nameservers $NAMESERVER
  post-up for i in rx tx sg tso ufo gso gro lro; do ethtool -K \$IFACE \$i off; done

EOF

fi

# Configure remaining interfaces
for INTERFACE in $MON_INTERFACES
do
            	# Get max RX size for monitored interface
            	MAX_RX=$(ethtool -g $INTERFACE | grep -m 1 RX | cut -d\: -f2 | awk '{sub(/^[ \t]+/, "")};1')
    
cat << EOF >> $FILE
auto $INTERFACE
iface $INTERFACE inet manual
  up ifconfig \$IFACE -arp up
  up ip link set \$IFACE promisc on
  down ip link set \$IFACE promisc off
  down ifconfig \$IFACE down
  post-up ethtool -G \$IFACE rx $MAX_RX; for i in rx tx sg tso ufo gso gro lro; do ethtool -K \$IFACE \$i off; done

EOF
done
  
reboot
  
# Restart networking
# /etc/init.d/networking restart >> $LOG 2>&1

# Restart processes
# /usr/sbin/nsm_sensor_ps-restart >> $LOG 2>&1
