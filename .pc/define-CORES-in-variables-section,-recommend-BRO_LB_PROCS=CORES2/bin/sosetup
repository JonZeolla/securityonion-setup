#!/bin/bash
#
# Copyright (C) 2010-2012 Security Onion
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#
# Description:
# Configure Security Onion.
#
# Version:
# 20120910
#
# Changelog:
# 20111116 - Set OSSEC timezone to match OS timezone
#
# 20111222 - Start Snorby
#
# 20120106 - If configuring server, make sure MySQL is started
# 	     If this box was previously a slave, we need to remove securityonion_ssh.conf
#
# 20120113 - Configure Bro
#
# 20120119 - Update threshold config in suricata.yaml
#	     Update PulledPork URLs
#
# 20120123 - If only one interface, configure Bro for standalone
#
# 20120124 - ossec_agent is now integrated into NSM scripts
#
# 20120229 - Run Snorby in production mode
#	     Add "mon" to list of valid interface types
#
# 20120312 - New Snorby packages
#
# 20120412 - Issue 226:	Rename bro workers
# http://code.google.com/p/security-onion/issues/detail?id=226
#
# 20120425 - Fix the following issues:
# Modify Setup script so that IDS Engine choice is a list instead of Yes or No default:
# http://code.google.com/p/security-onion/issues/detail?id=155
# Setup needs to delete /var/www/squert/.scripts/Ip2c/*.md5 before running ip2c.tcl:
# http://code.google.com/p/security-onion/issues/detail?id=250
# Update Setup to allow running multiple times in sensor-->server config:
# http://code.google.com/p/security-onion/issues/detail?id=256
# Setup should create snort.stats if user chooses Suricata:
# http://code.google.com/p/security-onion/issues/detail?id=257
#
# 20120508 - Fix the following issues:
# Issue 239: autossh should use OpenSSH ServerAliveInterval and ServerAliveCountMax options
# http://code.google.com/p/security-onion/issues/detail?id=239
# 
# 20120910 - Numerous fixes for BDR


#########################################
# Variables
#########################################
DEBUG="0"
# Window title
HOSTNAME=`hostname`
TITLE="Security Onion Setup ($HOSTNAME)"
# File locations
CONF="/etc/nsm/securityonion.conf"
LOG="/var/log/nsm/sosetup.log"
PP_CONF="/etc/nsm/pulledpork/pulledpork.conf"
# URLs
ET_URL="rules.emergingthreats.net"
VRT_URL="www.snort.org"
# Provide sensible defaults for Quick Setup
SGUIL_SERVER_NAME="securityonion"
IDS_ENGINE="snort"
IDS_RULESET="ETGPL"
INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | awk '{print $1}' | cut -d\: -f1 |sort`
NUM_INTERFACES=`echo $INTERFACES | wc -w`
SENSORTAB="/etc/nsm/sensortab"
UPDATE_ELSA_SERVER="NO"
# IDS_LB_PROCS goes into sensor.conf and controls threads for Snort/Suricata
IDS_LB_PROCS=1
IDS_LB_PROCS_CONFIRM="- Run a single IDS process per interface.\n"
# BRO_LB_PROCS goes into Bro's node.cfg and controls threads for Bro
BRO_LB_PROCS=1
BRO_LB_PROCS_CONFIRM="- Run a single Bro process per interface.\n"

#########################################
# Debug
#########################################
[ $DEBUG -eq 1 ] && echo "DEBUG: Debug is enabled.  To disable it, edit the script and change DEBUG to 0."

#########################################
# Got r00t?
#########################################
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Setup needs to be run as root.  Please try again using sudo."
    zenity --error --text="Setup needs to be run as root.  Please try again using sudo."
    exit
fi

#########################################
# Welcome screen
#########################################
TEXT="Welcome to Security Onion Setup!\n\
\n\
This program will allow you to configure Security Onion on $HOSTNAME.\n\
\n\
Would you like to continue?"
YES="Yes, Continue!"
NO="No, Quit."
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]
then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
        exit
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
fi

#########################################
# Quick Setup
#########################################
TEXT="Would you like to use Quick Setup or Advanced Setup?\n\
\n\
Quick Setup is recommended for first-time users or standalone VMs:\n\
- ideal for quickly evaluating Security Onion\n\
- will automatically configure most details of your system\n\
- configures Snort and Bro to monitor one network interface\n\
\n\
Advanced Setup is recommended for production deployments:\n\
- gives you more control over the details of your system\n\
- allows you to build a distributed sensor network\n\
- you choose Sguil server, Sguil sensor, or both\n\
- you choose which IDS engine to use (Snort or Suricata)\n\
- you choose which IDS ruleset(s) to use (Emerging Threats, Snort VRT, or both)\n\
- you choose which network interfaces should be monitored by the IDS Engine and Bro\n\
- you choose how many processes to run for Snort/Suricata/Bro"
YES="Quick Setup"
NO="Advanced Setup"
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ADVANCED_SETUP="$?"
if [ $ADVANCED_SETUP -eq 0 ]
then
	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes. Performing Quick Setup."
	if [ $NUM_INTERFACES -gt 1 ]; then
	        TEXT="Which network interface should $IDS_ENGINE listen on?"
	        INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | awk '{print $1}' | cut -d\: -f1 | sort |zenity --list --column="Interface" --hide-header --title="$TITLE" --text="$TEXT" `
	        if [ "$INTERFACES" = "" ]
	        then
	                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
        	        exit
	        fi
	fi
	SERVER=1
	SENSOR=1
        ELSA="YES"
	SERVERNAME="localhost"
	SENSOR_CONFIRM_1="- Configure Snort and Bro to monitor the following interface:\n"
	SENSOR_CONFIRM_2="$INTERFACES\n"
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No. Performing Advanced Setup."
        #########################################
	# Ask which components to configure
	#########################################
	TEXT="If this is the first machine in a distributed deployment, choose Server.\n\
If this is a sensor for a distributed deployment (you've already installed the Server), choose Sensor.\n\
Otherwise, choose Standalone to configure both Server and Sensor components."
	COMPONENTS=`zenity --list --column="Component" --hide-header --title="$TITLE" --text="$TEXT" Server Sensor Standalone`
	case $COMPONENTS in
        Standalone)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Standalone"
		SERVER=1
		SENSOR=1
		SERVERNAME="localhost"
		;;
	Server)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Server."
		SERVER=1
		SENSOR=0
		SERVERNAME="localhost"
		;;
	Sensor)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Sensor."
		SERVER=0
		SENSOR=1
		TEXT="What is the hostname or IP address of the Sguil server that this sensor should connect to?"
		SERVERNAME=`zenity --title="$TITLE" --text="$TEXT" --entry`
		[ x$SERVERNAME = "x" ] && exit
		TEXT="Please enter a username that can SSH to the Sguil server and execute sudo."
		SSH_USERNAME=`zenity --title="$TITLE" --text="$TEXT" --entry`
		[ x$SSH_USERNAME = "x" ] && exit
		SENSOR_CONFIRM_3="- Configure the sensors to report to $SERVERNAME.\n"
		;;	
	*)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
                exit
                ;;
        esac

	#########################################
	# Ask which IDS engine to use.
	#########################################
	if [ "$SERVERNAME" = "localhost" ]; then
       		TEXT="Which IDS Engine would you like to use?"
		IDS_ENGINE=`zenity --list --column="Component" --hide-header --title="$TITLE" --text="$TEXT" Snort Suricata`
		[ -z $IDS_ENGINE ] && exit 
	        [ $DEBUG -eq 1 ] && echo "DEBUG: User selected $IDS_ENGINE."
	fi

	#########################################
	# SENSOR-SPECIFIC
	#########################################
	if [ $SENSOR -eq 1 ]; then
	#########################################
	# Ask which interface to listen on
	#########################################
        if [ $NUM_INTERFACES -gt 1 ]; then
		TEXT="Which network interface(s) should be monitored?\n\
		\n\
You may select multiple interfaces using the Ctrl/Shift keys."
		INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | awk '{print $1}' | cut -d\: -f1 | sort | zenity --list --column="Interface" --hide-header --title="$TITLE" --text="$TEXT" --multiple`
		if [ "$INTERFACES" = "" ]; then
	       		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
		        exit
		fi

		# INTERFACES contains specified sensors pipe separated
		# Replace pipes with spaces
		INTERFACES=`echo $INTERFACES | sed 's/|/ /g'`
		[ $DEBUG -eq 1 ] &&  echo "DEBUG: Selected interfaces $INTERFACES."
	fi
	SENSOR_CONFIRM_1="- Monitor each of the following interfaces:\n"
	SENSOR_CONFIRM_2="$INTERFACES\n"

	# Determine number of cores and use that as a maximum value for IDS/Bro processes to run
	CORES=`grep -c ^processor /proc/cpuinfo`; LIST=`seq 1 $CORES`; SELECTIONS=`for i in $LIST; do echo "FALSE $i"; done`
	
	if [ "$CORES" -gt 1 ]; then
	# IDS_LB_PROCS
	TEXT="How many IDS engine processes would you like to run?\n\
	\n\
This is limited by the number of CPU cores on your system.\n\
\n\
If you need to change this setting later, it is set in the following places:\n\
- IDS_LB_PROCS variable in /etc/nsm/HOSTNAME-INTERFACE/sensor.conf (for Snort)\n\
- af_packet threads variable in /etc/nsm/HOSTNAME-INTERFACE/suricata.yaml (for Suricata)"
	IDS_LB_PROCS=`zenity --list --radiolist --column "" --column "" $SELECTIONS --hide-header --text="$TEXT" --title="$TITLE"`
	if [ "$IDS_LB_PROCS" = "" ]
        then
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
                exit
        fi
	IDS_LB_PROCS_CONFIRM="- Run $IDS_LB_PROCS load-balanced IDS engine processes per interface.\n"

	# BRO_LB_PROCS
	TEXT="How many Bro processes would you like to run?\n\
	\n\
This is limited by the number of CPU cores on your system.\n\
\n\
If you need to change this setting later, you can change the lb_procs variable in /opt/bro/etc/node.cfg."
	BRO_LB_PROCS=`zenity --list --radiolist --column "" --column "" $SELECTIONS --hide-header --text="$TEXT" --title="$TITLE"`
	if [ "$BRO_LB_PROCS" = "" ]
        then
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
                exit
        fi
	BRO_LB_PROCS_CONFIRM="- Run $BRO_LB_PROCS load-balanced Bro processes per interface.\n"
	fi # End if CORES > 1

	# End IF SENSOR=1
	fi 

	#########################################
	# Ask which IDS ruleset to use.
	#########################################
	if [ "$SERVERNAME" = "localhost" ]
	then
	TEXT="Which IDS ruleset would you like to use?"
	IDS_RULESET=`zenity --width=600 --height=300 --list --column="Ruleset" --column="Ruleset" --column="Oinkcode required?" --hide-column="1" --text="$TEXT" --title="$TITLE" \
	"ETGPL" "Emerging Threats GPL"  "no oinkcode required" \
	"ETPRO" "Emerging Threats PRO" "requires ETPRO oinkcode" \
	"VRTET" "Snort VRT ruleset and Emerging Threats NoGPL ruleset" "requires Snort VRT oinkcode" \
	"VRT" "Snort VRT ruleset only and set a VRT policy" "requires Snort VRT oinkcode" `

	case $IDS_RULESET in
	ETGPL)
        	[ $DEBUG -eq 1 ] &&  echo "DEBUG: Selecting Emerging Threats GPL ruleset."
        	IDS_RULESET_ACTION="- Download Emerging Threats GPL ruleset.\n"
        	;;
	ETPRO)
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Selecting ETPRO ruleset." 
	        TEXT="Please enter your Emerging Threats Pro oinkcode.\n\nIf you don't already have one, you can purchase one from http://www.emergingthreatspro.com/."
	        OINKCODE=`zenity --entry --title="Emerging Threats Pro Oinkcode" --text="$TEXT"`
	        [ $DEBUG -eq 1 ] && echo "DEBUG: Entered ETPRO oinkcode $OINKCODE"
	        IDS_RULESET_ACTION="- Download ETPRO ruleset using oinkcode $OINKCODE.\n"
        	;;
	VRT)
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Selecting Snort VRT ruleset only and setting a VRT policy."
	        TEXT="Please enter your Snort VRT oinkcode.\n\nIf you don't already have one, you can obtain one from http://www.snort.org/."
	        OINKCODE=`zenity --entry --title="Snort VRT Oinkcode" --text="$TEXT"`
	        [ $DEBUG -eq 1 ] && echo "DEBUG: Entered Snort VRT oinkcode $OINKCODE"
	        VRT_POLICY=`zenity --list --column="VRT Policy" --text="Please choose a VRT policy." --title="VRT Policy" \
	        "connectivity" \
	        "balanced" \
	        "security" `
	        [ $DEBUG -eq 1 ] && echo "DEBUG: Selected Snort VRT policy $VRT_POLICY"
	        IDS_RULESET_ACTION="- Download the Snort VRT ruleset using oinkcode $OINKCODE.\n- Set VRT policy to $VRT_POLICY.\n"
        	;;
	VRTET)
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Selecting Snort VRT and Emerging Threats NoGPL ruleset."
	        TEXT="Please enter your Snort VRT oinkcode.\n\nIf you don't already have one, you can obtain one from http://www.snort.org/."
	        OINKCODE=`zenity --entry --title="Snort VRT Oinkcode" --text="$TEXT"`
	        [ $DEBUG -eq 1 ] && echo "DEBUG: Entered Snort VRT oinkcode $OINKCODE"
	        IDS_RULESET_ACTION="- Download the Snort VRT ruleset using oinkcode $OINKCODE.\n- Download the Emerging Threats NoGPL ruleset.\n"
        	;;
	*)
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
        	exit
	        ;;
	esac
	fi
fi

if [ $SERVER -eq 1 ]
then
	#########################################
	# Sguil Server
	#########################################
	# Ask for Sguil client username
	USERNAME_CONFIRMED="no"
	while [ $USERNAME_CONFIRMED = "no" ]; do
		TEXT="What would you like your Sguil username to be?\r\rThis will be used when logging into Sguil, Squert, and ELSA.\r\rPlease use alphanumeric characters only."
		SGUIL_CLIENT_USERNAME=`zenity --title="$TITLE" --text="$TEXT" --entry`
		[ x$SGUIL_CLIENT_USERNAME = "x" ] && exit
		COMPRESSED="$(echo $SGUIL_CLIENT_USERNAME | sed -e 's/[^[:alnum:]]//g')"
		if [ "$COMPRESSED" != "$SGUIL_CLIENT_USERNAME" ] ; then
	    		zenity --error --text="Invalid username\! \r \
\r \
Please use alphanumeric characters only."
		else
	    		USERNAME_CONFIRMED="yes"
		fi
	done

	# Ask for email address for Snorby
	EMAIL_CONFIRMED="no"
	while [ $EMAIL_CONFIRMED = "no" ]; do
		TEXT="What is your email address?\r\rThis will be used when logging into Snorby."
		SNORBY_EMAIL=`zenity --title="$TITLE" --text="$TEXT" --entry`
		[ x$SNORBY_EMAIL = "x" ] && exit
		if [[ "$SNORBY_EMAIL" != *?"@"?*.?* ]] ; then 
			zenity --error --text="Invalid email address\! \r \
\r \
Please ensure your email address is of the form: \r \
user@example.com"
		else
			EMAIL_CONFIRMED="yes"
		fi
	done

	# Ask for and confirm Sguil client password
	SGUIL_CLIENT_PASSWORD_CONFIRMED="no"
	while [ $SGUIL_CLIENT_PASSWORD_CONFIRMED = "no" ]; do
		TEXT="What would you like to set your password to?\n\nThis will be used for Sguil, Squert, Snorby, and ELSA.\n\nPassword must be at least 6 characters!"
		SGUIL_CLIENT_PASSWORD_1=`zenity --title="$TITLE" --text="$TEXT" --entry --hide-text`
		[ "x$SGUIL_CLIENT_PASSWORD_1" = "x" ] && exit
		TEXT="Please confirm what you would like to set your password to."
		SGUIL_CLIENT_PASSWORD_2=`zenity --title="$TITLE" --text="$TEXT" --entry --hide-text`
		[ "x$SGUIL_CLIENT_PASSWORD_2" = "x" ] && exit
		if [ "$SGUIL_CLIENT_PASSWORD_1" = "$SGUIL_CLIENT_PASSWORD_2" ]; then
		        if [ "${#SGUIL_CLIENT_PASSWORD_1}" -lt "6" ]; then
				zenity --error --text="Password must be at least 6 characters\!"
			else
				SGUIL_CLIENT_PASSWORD_CONFIRMED="yes"
			fi
		else
		        zenity --error --text="Passwords didn't match\!"
		fi
	done
	SERVER_CONFIRM="- Create a Sguil server named $SGUIL_SERVER_NAME. \n"
	SERVER_USER_CONFIRM="- Create a Sguil user named $SGUIL_CLIENT_USERNAME. \n"
	SNORBY_USER_CONFIRM="- Create a Snorby user named $SNORBY_EMAIL. \n"
fi

#########################################
# Ask whether or not to use ELSA
#########################################
TEXT="ELSA (Enterprise Log Search and Archive) is a centralized syslog framework\n\
built on Syslog-NG, MySQL, and Sphinx full-text search.\n\
\n\
It provides a nice web-based interface to hunt through your logs.\n\
\n\
Would you like to enable ELSA?"
YES="Yes, enable ELSA!"
NO="No, disable ELSA."
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 0 ]; then
    [ $DEBUG -eq 1 ] && echo "DEBUG: Enable ELSA."
    ELSA="YES"
else
    [ $DEBUG -eq 1 ] && echo "DEBUG: Disable ELSA."
    ELSA="NO"
fi
if [ "$ELSA" = "YES" ]; then
  if [ $SERVER -eq 1 ]; then
    	ELSA_ACTION_CONFIRM="- Configure ELSA as both a Log Node and Web Node.\n"
  else
    	ELSA_ACTION_CONFIRM="- Configure ELSA as a Log Node.\n"
	# Ask if they want to update the SERVER and restart Apache
	TEXT="Would you like to automatically update the ELSA server?\n\
\n\
This will restart Apache on the ELSA server and may disrupt any user sessions."
	YES="Yes, update ELSA server!"
	NO="No, do not update ELSA server."
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO"
	ANSWER="$?"
	if [ $ANSWER -eq 0 ]; then
	    	[ $DEBUG -eq 1 ] && echo "DEBUG: Update ELSA Server."
    		UPDATE_ELSA_SERVER="YES"
	else
		[ $DEBUG -eq 1 ] && echo "DEBUG: Do not update ELSA server."
    		UPDATE_ELSA_SERVER="NO"
	fi
  fi
else
  ELSA_ACTION_CONFIRM="- Disable ELSA."
fi

#########################################
# Confirm all choices before proceeding
#########################################
# Last chance!
TEXT="We're about to do the following:\n\
- Set the OS timezone to UTC. \n\
- Delete any existing NSM data/configuration. \n\
$SERVER_CONFIRM\
$SERVER_USER_CONFIRM\
$SNORBY_USER_CONFIRM\
$SENSOR_CONFIRM_1\
$SENSOR_CONFIRM_2\
$SENSOR_CONFIRM_3\
$IDS_LB_PROCS_CONFIRM\
$BRO_LB_PROCS_CONFIRM\
$IDS_RULESET_ACTION\
$ELSA_ACTION_CONFIRM\
\n\
We're about to make changes to your system!\n\
\n\
Would you like to continue?"
YES="Yes, proceed with the changes!"
NO="No, do not make changes!"
zenity --question --no-wrap --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO"
ANSWER="$?"
if [ $ANSWER -eq 1 ]
then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No. Do not proceed."
        exit
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes to proceed with all changes."
fi

#########################################
# BEGIN Zenity Progress window
# http://library.gnome.org/users/zenity/stable/zenity-progress-options.html.en
#########################################
(

#########################################
# Create files/dirs as necessary
#########################################
touch $SENSORTAB
mkdir -p /var/log/nsm/
touch $LOG

#########################################
# Set OS timezone to UTC
#########################################
echo "3"
echo "# Please wait while setting OS timezone to UTC..." | tee -a $LOG
echo "Etc/UTC" > /etc/timezone
dpkg-reconfigure --frontend noninteractive tzdata >> $LOG 2>&1
date >> $LOG 2>&1

if pgrep rsyslog>/dev/null; then 
	echo "4"
	echo "# Please wait while restarting rsyslog..." | tee -a $LOG
	service rsyslog restart >> $LOG 2>&1
fi

echo "5"
echo "# Please wait while setting OSSEC timezone to UTC..." | tee -a $LOG
cp /etc/localtime /var/ossec/etc/localtime
chown root:ossec /var/ossec/etc/localtime

echo "7"
echo "# Please wait while restarting OSSEC..." | tee -a $LOG
service ossec-hids-server restart >> $LOG 2>&1

#########################################
# Stop all Sguil services and delete config
#########################################
echo "10"
echo "# Please wait while stopping all NSM services..." | tee -a $LOG
service nsm stop >> $LOG 2>&1
/opt/bro/bin/broctl stop >> $LOG 2>&1
# terminate any extra processes
pkill -f suricata
pkill -f snort
# Delete all nsm configuration (make sure MySQL is running so the DB gets deleted)
[ $SERVER -eq 1 ] && service mysql start >> $LOG 2>&1
/usr/sbin/nsm_all_del_quick >> $LOG 2>&1

#########################################
# Firewall
# When enabling ufw over SSH, it says it might disrupt the SSH
# connection and asks for confirmation, so we put in the "allow 22" first, 
# then echo "y" into the "ufw enable", and hope for the best!
#########################################
# Open port 22 for remote administration
ufw allow 22/tcp >> $LOG 2>&1
# Open port 1514/udp for OSSEC agents
ufw allow 1514/udp >> $LOG 2>&1
# Enable ufw if not already enabled
echo "y" | ufw enable >> $LOG 2>&1

#########################################
# Add the Sguil server if necessary
#########################################
if [ $SERVER -eq 1 ]
then
# If this box was previously a slave, we need to remove securityonion_ssh.conf
rm -f /root/.ssh/securityonion_ssh.conf
echo "20"
echo "# Please wait while creating the Sguil server..." | tee -a $LOG
/usr/sbin/nsm_server_add --server-name="$SGUIL_SERVER_NAME" --server-sensor-name=NULL --server-sensor-port=7736 --server-client-port=7734 --server-client-user="$SGUIL_CLIENT_USERNAME" --server-client-pass="$SGUIL_CLIENT_PASSWORD_1" --server-auto=yes --force-yes >> $LOG 2>&1
# Create /etc/sguild symlink - http://securityonion.blogspot.com/2011/11/security-onion-20111130-now-available.html
ln -f -s /etc/nsm/"$SGUIL_SERVER_NAME"/ /etc/sguild

echo "25"
echo "# Please wait while configuring firewall..." | tee -a $LOG
# Open port 443 for https web interface
ufw allow 443/tcp >> $LOG 2>&1
# Open port 444 for Snorby web interface
ufw allow 444/tcp >> $LOG 2>&1
# Open port 7734 for Sguil clients
ufw allow 7734/tcp >> $LOG 2>&1
# Open port 7736 for Sguil sensors
ufw allow 7736/tcp >> $LOG 2>&1

echo "30"
echo "# Please wait while configuring Squert web interface to connect to Sguil database..." | tee -a $LOG
mysql -N -B --user=root -e "GRANT SELECT ON securityonion_db.* TO 'readonly'@'localhost' IDENTIFIED BY 'securityonion';" >> $LOG 2>&1
mysql -N -B --user=root -e "GRANT ALL PRIVILEGES ON securityonion_db.mappings TO 'readonly'@'localhost' IDENTIFIED BY 'securityonion';" >> $LOG 2>&1
mysql -N -B --user=root -e "GRANT ALL PRIVILEGES ON securityonion_db.ip2c TO 'readonly'@'localhost';" >> $LOG 2>&1
mysql -N -B --user=root -e "GRANT FILE ON *.* TO 'readonly'@'localhost';" >> $LOG 2>&1
cat /var/www/squert/.scripts/db/squert.sql | mysql -uroot -U securityonion_db  >> $LOG 2>&1
cat /var/www/squert/.scripts/db/v0.8.sql | mysql -uroot -U securityonion_db  >> $LOG 2>&1

echo "40"
echo "# Please wait while adjusting Sguil rule locations..." | tee -a $LOG
# We keep all our rules in /etc/nsm/rules, so symlink all other rules locations to here
rm -rf /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/default >> $LOG 2>&1
ln -s /etc/nsm/rules /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/default >> $LOG 2>&1
fi

#########################################
# Sguil Sensor(s) if necessary
#########################################
if [ $SENSOR -eq 1 ]
then
echo "47"
echo "# Please wait while creating Sguil sensor(s)..." | tee -a $LOG
BY2PORT=8000
HOSTNAME=`hostname`

# HIDS Sensor
SENSORNAME="$HOSTNAME-ossec"
sed -i "s|^set HOSTNAME.*$|set HOSTNAME $SENSORNAME|g" /etc/nsm/ossec/ossec_agent.conf
sed -i "s|^set NET_GROUP.*$|set NET_GROUP $SENSORNAME|g" /etc/nsm/ossec/ossec_agent.conf
sed -i "s|^set SERVER_HOST.*$|set SERVER_HOST $SERVERNAME|g" /etc/nsm/ossec/ossec_agent.conf
pkill -f ossec_agent

# Configure SSH Key authentication to server if necessary
if [ "$SERVERNAME" != "localhost" ]
then
	SSH_DIR="/root/.ssh"
	SSH_CONF="$SSH_DIR/securityonion_ssh.conf"
	mkdir -p $SSH_DIR		
	KEY="$SSH_DIR/securityonion"
	[ -f "$KEY" ] && mv $KEY $KEY.old
        ssh-keygen -f "$KEY" -N '' >> $LOG 2>&1
        chmod 600 "$KEY"*
        xfce4-terminal -x ssh-copy-id -i "$KEY".pub $SSH_USERNAME@$SERVERNAME 
	# Backup existing rules
	mkdir -p /etc/nsm/rules/backup/
	cp /etc/nsm/rules/downloaded.rules /etc/nsm/rules/backup/downloaded.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
	cp /etc/nsm/rules/local.rules /etc/nsm/rules/backup/local.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
	cp /etc/nsm/rules/so_rules.rules /etc/nsm/rules/backup/so_rules.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
	cp /etc/nsm/rules/sid-msg.map /etc/nsm/rules/backup/sid-msg.map.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
	cp /etc/nsm/rules/threshold.conf /etc/nsm/rules/backup/threshold.conf.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
	cp /etc/nsm/rules/bpf.conf /etc/nsm/rules/backup/bpf.conf.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
	# Copy rules from server
	scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/downloaded.rules /etc/nsm/rules/downloaded.rules >> $LOG 2>&1
	scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/local.rules /etc/nsm/rules/local.rules >> $LOG 2>&1
	scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/so_rules.rules /etc/nsm/rules/so_rules.rules >> $LOG 2>&1
	scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/sid-msg.map /etc/nsm/rules/sid-msg.map >> $LOG 2>&1
	scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/threshold.conf /etc/nsm/rules/threshold.conf >> $LOG 2>&1
	scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/bpf.conf /etc/nsm/rules/bpf.conf >> $LOG 2>&1
	# Save configuration
	echo "SSH_USERNAME=$SSH_USERNAME" > $SSH_CONF
	echo "SERVERNAME=$SERVERNAME" >> $SSH_CONF
	IDS_ENGINE=`ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME grep ENGINE /etc/nsm/securityonion.conf 2>/dev/null | cut -d\= -f2` >> $LOG 2>&1
fi

# NIDS sensor(s)
for INTERFACE in $INTERFACES
do	
	SENSORNAME="$HOSTNAME-$INTERFACE"
	echo "# Please wait while creating Sguil sensor: $SENSORNAME..." | tee -a $LOG
        [ $DEBUG -eq 1 ] && echo "DEBUG: Adding Sensor $INTERFACE."

	# Add the sensor
        /usr/sbin/nsm_sensor_add --sensor-name="$SENSORNAME" --sensor-interface="$INTERFACE" --sensor-interface-auto=no \
                                        --sensor-server-host="$SERVERNAME" --sensor-server-port=7736 \
                                        --sensor-barnyard2-port=$BY2PORT --sensor-auto=yes --sensor-utc=yes \
                                        --sensor-vlan-tagging=no --sensor-net-group="$SENSORNAME" --force-yes >> $LOG 2>&1

	# Increment the Barnyard2 port number by 100
	let BY2PORT=BY2PORT+100

        # Copy our customized snort.conf (and associated files) into place
        cp /etc/nsm/templates/snort/attribute_table.dtd /etc/nsm/"$SENSORNAME"/ >> $LOG 2>&1
        cp /etc/nsm/templates/snort/snort.conf /etc/nsm/"$SENSORNAME"/ >> $LOG 2>&1
        cp /etc/nsm/templates/snort/unicode.map /etc/nsm/"$SENSORNAME"/ >> $LOG 2>&1
        cp /etc/nsm/templates/suricata/suricata.yaml.in /etc/nsm/"$SENSORNAME"/suricata.yaml >> $LOG 2>&1
	sed -i "s|# threshold-file: /etc/suricata/threshold.config|threshold-file: /etc/nsm/$SENSORNAME/threshold.conf|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	sed -i "s|classification-file: @e_sysconfdir@classification.config|classification-file: /etc/nsm/$SENSORNAME/classification.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	sed -i "s|reference-config-file: @e_sysconfdir@reference.config|reference-config-file: /etc/nsm/$SENSORNAME/reference.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	sed -i "s|filename: unified2.alert|filename: snort.unified2|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	sed -i "s|threads: IDS_LB_PROCS|threads: $IDS_LB_PROCS|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	sed -i "s|# threshold-file: /etc/suricata/threshold.config|threshold-file: /etc/nsm/$SENSORNAME/threshold.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	sed -i "s|interface: eth0|interface: $INTERFACE|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	sed -i "s|cluster-id: 99|cluster-id: $BY2PORT|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
	mkdir -p /usr/local/lib/snort_dynamicrules

	# /etc/nsm/rules/
	if [ ! -f /etc/nsm/rules/bpf.conf ]; then touch /etc/nsm/rules/bpf.conf; fi
	if [ ! -f /etc/nsm/rules/threshold.conf ]; then cp /etc/nsm/templates/snort/threshold.conf /etc/nsm/rules/; fi
	if [ ! -f /etc/nsm/rules/gen-msg.map ]; then cp /etc/nsm/templates/snort/gen-msg.map /etc/nsm/rules/; fi
	if [ ! -f /etc/nsm/rules/classification.config ]; then
		grep -h -v "^#" /etc/nsm/templates/snort/classification.config /etc/nsm/templates/suricata/classification.config |sort -u > /etc/nsm/rules/classification.config
	fi
	if [ ! -f /etc/nsm/rules/reference.config ]; then
		grep -h -v "^#" /etc/nsm/templates/snort/reference.config /etc/nsm/templates/suricata/reference.config |sort -u > /etc/nsm/rules/reference.config
	fi

        # Create symbolic links for bpf.conf, threshold.conf, sid-msg.map, gen-msg.map, classification.config, and reference.config
	for FILENAME in bpf.conf threshold.conf sid-msg.map gen-msg.map classification.config reference.config
	do
        	rm -f /etc/nsm/"$SENSORNAME"/$FILENAME >> $LOG 2>&1
	        ln -s /etc/nsm/rules/$FILENAME /etc/nsm/"$SENSORNAME"/$FILENAME >> $LOG 2>&1
	done

        # Create symbolic links for individual bpf-*.conf files pointing to the sensor bpf.conf (which points to the GLOBAL bpf.conf)
	cd /etc/nsm/"$SENSORNAME"
	for FILENAME in bpf-ids.conf bpf-pcap.conf bpf-prads.conf
	do
	        ln -s bpf.conf $FILENAME >> $LOG 2>&1
	done
	cd - >/dev/null

	# Add IDS_LB_PROCS to sensor.conf
	echo "IDS_LB_PROCS=$IDS_LB_PROCS" >> /etc/nsm/"$SENSORNAME"/sensor.conf

	# Create symbolic link for sensor rules directory on server
	if [ "$SERVERNAME" = "localhost" ]; then
        	ln -s /etc/nsm/rules /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/"$SENSORNAME" >> $LOG 2>&1
		for i in `seq 1 $CORES`; do ln -s /etc/nsm/rules /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/"$SENSORNAME"-$i >> $LOG 2>&1; done
	else
		COMMAND="ln -f -s /etc/nsm/rules /nsm/server_data/$SGUIL_SERVER_NAME/rules/$SENSORNAME"
		for i in `seq 1 $CORES`; do
			COMMAND="$COMMAND; ln -f -s /etc/nsm/rules /nsm/server_data/$SGUIL_SERVER_NAME/rules/$SENSORNAME-$i"
		done
		echo $COMMAND > /tmp/sosetupscp
	fi

        # Configure snort.conf to log statistics to /nsm/sensor_data/"$SENSORNAME"/snort.stats
        sed -i "s|# preprocessor perfmonitor: time 300 file /var/snort/snort.stats pktcnt 10000|preprocessor perfmonitor: time 300 file /nsm/sensor_data/"$SENSORNAME"/snort.stats pktcnt 10000|" /etc/nsm/"$SENSORNAME"/snort.conf >> $LOG 2>&1

	# Setup should create snort.stats to prevent Sguil errors when running Suricata
	# http://code.google.com/p/security-onion/issues/detail?id=257
	touch /nsm/sensor_data/"$SENSORNAME"/snort.stats

done

# Bro
if grep -v "^#" $SENSORTAB > /dev/null
then
	# If user selected Quick Setup, do standalone config.
	# Otherwise, do cluster config.
	if [ $ADVANCED_SETUP -eq 0 ]; then
		# standalone config
		INTERFACE=`grep -v "^#" $SENSORTAB | awk '{print $4}'`
		cat << EOF > /opt/bro/etc/node.cfg
[bro]
type=standalone
host=localhost
interface=$INTERFACE
EOF
	else
		# User selected Advanced Setup, so do cluster config
		cat << EOF > /opt/bro/etc/node.cfg
[manager]
type=manager
host=localhost

[proxy]
type=proxy
host=localhost

EOF
                IP=`ifconfig |grep "inet addr" | awk '{print $2}' |cut -d\: -f2 |grep -v "127.0.0.1" |head -1`
                sed -i "s|host=localhost|host=$IP|g" /opt/bro/etc/node.cfg
                grep -v "^#" $SENSORTAB | awk '{print $1}' |while read SENSOR
                do
                        INTERFACE=`grep $SENSOR $SENSORTAB|awk '{print $4}'`
                        echo "* Configuring Bro to monitor $INTERFACE" >> $LOG 2>&1
                        cat << EOF >> /opt/bro/etc/node.cfg
[$SENSOR]   
type=worker
host=$IP
interface=$INTERFACE
lb_method=pf_ring
lb_procs=$BRO_LB_PROCS

EOF
                done
        fi
	# Finished with node.cfg
	# Now update networks.cfg
	if grep "172.16" /opt/bro/etc/networks.cfg >/dev/null; then
		echo "/opt/bro/etc/networks.cfg already contains 172.16" >> $LOG 2>&1
	else
		echo "172.16.0.0/12       Private IP space" >> /opt/bro/etc/networks.cfg
	fi
	# update broctl.cfg
	if grep "nsm" /opt/bro/etc/broctl.cfg >/dev/null; then
		echo "/opt/bro/etc/broctl.cfg already contains nsm" >> $LOG 2>&1
	else
		sed -i 's|SpoolDir = /var/opt/bro/spool|SpoolDir = /nsm/bro/spool|g' /opt/bro/etc/broctl.cfg
		sed -i 's|LogDir = /var/opt/bro/logs|LogDir = /nsm/bro/logs|g' /opt/bro/etc/broctl.cfg
	fi
	# Finished updating config files
	# create the /nsm/bro/ directories
	mkdir -p /nsm/bro/spool
	mkdir -p /nsm/bro/logs
	# Disabling the Bro non-root stuff for now
	#chown -R sguil:sguil /nsm/bro
	# Allow Bro to run as non-root
	#setcap cap_net_raw,cap_net_admin=eip /opt/bro/bin/bro
	#setcap cap_net_raw,cap_net_admin=eip /opt/bro/bin/capstats
	# Now tell Bro to install the new config and create the "current" symlink in /nsm/bro/logs
	/opt/bro/bin/broctl install >> $LOG 2>&1
fi

fi

#########################################
# IDS Engine
#########################################
echo "55"
echo "# Please wait while setting IDS Engine to $IDS_ENGINE..." | tee -a $LOG
IDS_ENGINE_LOWER=`echo ${IDS_ENGINE,,}`
echo "ENGINE=$IDS_ENGINE_LOWER" > $CONF
echo "DAYSTOKEEP=365" >> $CONF

#########################################
# Download rules using Pulledpork
#########################################
if [ "$SERVERNAME" = "localhost" ]; then
	echo "60"
	echo "# Please wait while configuring IDS Ruleset..." | tee -a $LOG
	# Start from a clean slate (pulledpork.conf.master)
	# Here are the rule_url directives in pulledpork.conf.master:
	# (note that the ET ruleset is uncommented and the other two are commented)
	# #rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|<oinkcode>
	# rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open
	# # THE FOLLOWING URL is for etpro downloads, note the tarball name change!
	# # and the et oinkcode requirement!
	# #rule_url=https://rules.emergingthreatspro.com/|etpro.rules.tar.gz|<et oinkcode>
	# 
	cp /etc/nsm/templates/pulledpork/pulledpork.conf.master $PP_CONF >> $LOG 2>&1

	# Start with the assumption that Internet is down
	# If all necessary sites are up, then initiate PulledPork
	INTERNET="DOWN"

	case $IDS_RULESET in
	ETGPL)
		echo "Already configured for Emerging Threats GPL ruleset." >> $LOG 2>&1
		# Test Internet access
		curl -s $ET_URL && INTERNET="UP"
		;;
	ETPRO)
		echo "Configuring for ETPRO ruleset." >> $LOG 2>&1
		# Snort is already disabled in pulledpork.conf.master
		# Disable ET.
		sed -i 's\rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\#rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\g' $PP_CONF >> $LOG 2>&1
		# Enable ETPRO.
		sed -i "s\#rule_url=https://rules.emergingthreatspro.com/|etpro.rules.tar.gz|<et oinkcode>\rule_url=https://rules.emergingthreatspro.com/|etpro.rules.tar.gz|$OINKCODE\g" $PP_CONF >> $LOG 2>&1
		# Test Internet access
		curl -s $ET_URL && INTERNET="UP"
		;;
	VRT)
		echo "Configuring for Snort VRT ruleset only and setting a VRT policy." >> $LOG 2>&1
		# Disable ET.
		sed -i 's\rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\#rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\g' $PP_CONF >> $LOG 2>&1
		# Enable Snort.
		sed -i "s\#rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|<oinkcode>\rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|$OINKCODE\g" $PP_CONF >> $LOG 2>&1
		# Set VRT Policy.
		sed -i "s|# ips_policy=security|ips_policy=$VRT_POLICY|g" $PP_CONF >> $LOG 2>&1
		# Test Internet access
		curl -s $VRT_URL && INTERNET="UP"
		;;
	VRTET)
		echo "Configuring for Snort VRT and Emerging Threats NoGPL rulesets" >> $LOG 2>&1
		# Enable Snort.
		sed -i "s\#rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|<oinkcode>\rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|$OINKCODE\g" $PP_CONF >> $LOG 2>&1
		# Test Internet access
		curl -s $ET_URL && curl -s $VRT_URL && INTERNET="UP"
		;;
	esac

	if [ "$INTERNET" = "UP" ]; then
		echo "65"
		echo "# Please wait while executing PulledPork to download rules..." | tee -a $LOG
		mkdir -p /etc/nsm/rules/backup/
		cp /etc/nsm/rules/downloaded.rules /etc/nsm/rules/backup/downloaded.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
		mkdir -p /var/log/nsm/
		/usr/bin/pulledpork.pl -c $PP_CONF >> /var/log/nsm/pulledpork.log
	else
		zenity --error --text="Rule download sites appear to be down.  Skipping rule update."
		echo "Rule download sites appear to be down.  Skipping rule update." >> $LOG 2>&1
	fi
fi

#########################################
# Start all Sguil services
#########################################
SSH_DIR="/root/.ssh"
SSH_CONF="$SSH_DIR/securityonion_ssh.conf"
echo "70"
if [ -f $SSH_CONF ]; then
        # We are a SENSOR  
	echo "# Please wait while killing existing SSH tunnel to MASTER..." | tee -a $LOG
	pkill -f autossh
else
	# We are the MASTER.
	echo "# Please wait while initializing Snorby database..." | tee -a $LOG
	# Kill any existing Snorby processes.
	pkill -f delayed_job
	# Delete any existing Snorby data.
	if [ -d /var/lib/mysql/snorby ]; then
		mysql -e "drop database snorby" >> $LOG 2>&1
	fi
	# Set email and password
	cp /opt/snorby/db/seeds.rb.securityonion /opt/snorby/db/seeds.rb
        sed -i "s|ReplaceWithDesiredEmail|$SNORBY_EMAIL|g" /opt/snorby/db/seeds.rb
        sed -i "s|ReplaceWithDesiredPassword|$SGUIL_CLIENT_PASSWORD_1|g" /opt/snorby/db/seeds.rb
	# Initialize Snorby DB
	su www-data -c "cd /opt/snorby; bundle exec rake snorby:setup RAILS_ENV=production" >> $LOG 2>&1
	# Shred the Snorby password
	shred -u /opt/snorby/db/seeds.rb >> $LOG 2>&1
fi
echo "75"
echo "# Please wait while starting all Security Onion services..." | tee -a $LOG
start securityonion >> $LOG 2>&1

#########################################
# Configure ELSA
#########################################
if [ "$ELSA" = "YES" ]; then
    echo "90"
    echo "# Please wait while configuring ELSA..." | tee -a $LOG
    #check if there is an ELSA directive already
    ELSA=$(grep "ELSA=" $CONF)
    if [ ! $? -eq 0 ]; then
        echo "ELSA=YES" >> $CONF
        else
                sed -i 's,ELSA=NO,ELSA=YES,' $CONF
    fi
    # Delete any existing ELSA databases.
    if [ -d /var/lib/mysql/elsa_web/ ]; then
	mysql -e "drop database elsa_web" >> $LOG 2>&1
    fi
    if [ -d /var/lib/mysql/syslog/ ]; then
    	mysql -e "drop database syslog" >> $LOG 2>&1
    fi
    if [ -d /var/lib/mysql/syslog_data/ ]; then
    	mysql -e "drop database syslog_data" >> $LOG 2>&1
    fi
    # Configure all Log Node and Web Node functionality if we are a server
    if [ $SERVER -eq 1 ]; then
        /usr/bin/securityonion-elsa-config.sh -t WEB >> $LOG 2>&1
    else
        /usr/bin/securityonion-elsa-config.sh -t LOG >> $LOG 2>&1
    fi
    if [ "$UPDATE_ELSA_SERVER" = "YES" ]; then
	echo "/usr/bin/securityonion_elsa_register.rb -f && service apache2 restart" >> /tmp/sosetupscp
    fi
fi

#########################################
# Send all queued commands to server
#########################################
if [ "$SERVERNAME" != "localhost" ]; then
    	echo "95"
    	echo "# Please wait while configuring server..." | tee -a $LOG
	# Copy the script over
	scp -i "$KEY" /tmp/sosetupscp $SSH_USERNAME@$SERVERNAME:/tmp/sosetupscp
	# Run the script with sudo
	xfce4-terminal -x ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME sudo /bin/bash /tmp/sosetupscp
	# Cleanup
	rm -f /tmp/sosetupscp
	ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME rm -f /tmp/sosetupscp >> $LOG 2>&1
fi

#########################################
# END Zenity Progress window
#########################################
) |
zenity --progress --title="$TITLE" --text="Please wait while making changes to the system..." --percentage=0 --auto-close

#########################################
# If this is a server, populate ip2c table
#########################################
if [ -d /var/lib/mysql/securityonion_db/ ]; then
	/usr/bin/sguild-add-user "$SGUIL_CLIENT_USERNAME" "$SGUIL_CLIENT_PASSWORD_1" >/dev/null
	cd /var/www/squert/.scripts/Ip2c/
	# Setup needs to delete /var/www/squert/.scripts/Ip2c/*.md5 before running ip2c.tcl
	# http://code.google.com/p/security-onion/issues/detail?id=250
	rm -f *.md5
	./ip2c.tcl >> $LOG 2>&1 &
	cd - >/dev/null
fi

#########################################
# FIN
#########################################
TEXT="Security Onion Setup is now complete! \n \
\n \
Setup log can be found here:\n \
$LOG\n \
\n \
You may view IDS alerts using Sguil, Squert, or Snorby. \n \
\n \
Bro logs can be found in: \n \
/nsm/bro/ \n \
and in ELSA (if enabled)"
zenity --info --title="$TITLE" --text="$TEXT" --no-wrap

TEXT="Rules downloaded by Pulledpork are stored in: \n \
/etc/nsm/rules/downloaded.rules \n \
\n \
Local rules can be added to: \n \
/etc/nsm/rules/local.rules \n \
\n \
You can have PulledPork modify the downloaded rules \n \
by modifying the files in: \n \
/etc/nsm/pulledpork/ \n \
\n \
Rules will be updated every day at 7:01 AM UTC. \n \
You can manually update them by running: \n \
/usr/bin/rule-update \n \
\n \
Sensors can be tuned by modifying the files in: \n \
/etc/nsm/NAME-OF-SENSOR/"
zenity --info --title="$TITLE" --text="$TEXT" --no-wrap

TEXT='If you have any questions or problems,\
please visit our website where you can find\
the following links:\
FAQ\
Wiki\
Mailing Lists\
IRC channel\
and more!\
\
http://securityonion.blogspot.com'
zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
