Description: Support ELSA r1090 new architecture.
 .
 securityonion-setup (20120912-0ubuntu0securityonion80) precise; urgency=low
 .
   * enable/disable Bro file extraction
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-setup-20120912.orig/bin/sosetup
+++ securityonion-setup-20120912/bin/sosetup
@@ -1,3 +1,4 @@
+# DOUG
 #!/bin/bash
 #
 # Copyright (C) 2010-2013 Doug Burks and Security Onion
@@ -1344,19 +1345,20 @@ fi
 #########################################
 # Configure ELSA
 #########################################
+# New
 if [ "$ELSA" = "YES" ]; then
     echo "90"
     echo "# Please wait while configuring ELSA..." | tee -a $LOG
     #check if there is an ELSA directive already
-    ELSA=$(grep "ELSA=" $CONF)
+    ELSA_USE=$(grep "ELSA=" $CONF)
     if [ ! $? -eq 0 ]; then
         echo "ELSA=YES" >> $CONF
-        else
-                sed -i 's,ELSA=NO,ELSA=YES,' $CONF
+    else
+        sed -i 's,ELSA=NO,ELSA=YES,' $CONF
     fi
     # Delete any existing ELSA databases.
     if [ -d /var/lib/mysql/elsa_web/ ]; then
-	mysql -e "drop database elsa_web" >> $LOG 2>&1
+	    mysql -e "drop database elsa_web" >> $LOG 2>&1
     fi
     if [ -d /var/lib/mysql/syslog/ ]; then
     	mysql -e "drop database syslog" >> $LOG 2>&1
@@ -1369,9 +1371,8 @@ if [ "$ELSA" = "YES" ]; then
         /usr/bin/securityonion-elsa-config.sh -t WEB >> $LOG 2>&1
     else
         /usr/bin/securityonion-elsa-config.sh -t LOG >> $LOG 2>&1
-    fi
-    if [ "$UPDATE_ELSA_SERVER" = "YES" ]; then
-	echo "/usr/bin/securityonion_elsa_register.rb -f && service apache2 restart" >> /tmp/sosetupscp
+        # Update the securityonion group
+        echo "usermod -a -G securityonion $SSH_USERNAME" >> /tmp/sosetupscp
     fi
 fi
 
@@ -1390,6 +1391,31 @@ if [ "$SERVERNAME" != "localhost" ]; the
 	ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME rm -f /tmp/sosetupscp >> $LOG 2>&1
 fi
 
+if [ $SERVER -ne 1 ] && [ "$ELSA" = "YES" ]; then
+    # Register the log node and restart the server.
+    SSH_CMD="/usr/bin/securityonion_elsa_register.rb --register --peer-name `hostname` --force"
+    ELSA_REGISTER_RESPONSE=`ssh -i $KEY $SSH_USERNAME@$SERVERNAME $SSH_CMD`
+    ELSA_PORT=`echo $ELSA_REGISTER_RESPONSE | cut -d',' -f1`
+    ELSA_APIKEY=`echo $ELSA_REGISTER_RESPONSE | cut -d',' -f2`
+    # Copy the ELSA port back into the SSH config file for future use.
+    echo "ELSA_PORT=$ELSA_PORT" >> $SSH_CONF
+    # Update the local ELSA API key
+    /usr/bin/securityonion_elsa_register.rb --update-apikey $ELSA_APIKEY
+    # Since the securityonion service started before we the ELSA ports
+    # were determined, we need to tear down the SSH tunnel and restart it.
+    # Kill autossh with SIGINT
+    if pgrep autossh>/dev/null; then 
+        kill -SIGINT `pgrep autossh`
+        # Restart the autossh tunnel
+        /usr/bin/autossh -M 0 -f -q -N -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -i "$KEY" -L 3306:127.0.0.1:3306 -R $ELSA_PORT:localhost:3154 $SSH_USERNAME@$SERVERNAME
+    fi
+    if [ "$UPDATE_ELSA_SERVER" = "YES" ]; then
+        # Instruct the server to restart apache2.
+        ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME service apache2 restart >> $LOG 2>&1
+    fi
+fi
+
+
 #########################################
 # Now that the master knows about
 # this minion, tell minion to update
