Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-setup (20120912-0ubuntu0securityonion34) precise; urgency=low
 .
   * /etc/network/interfaces config by Matt Gregory
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-setup-20120912.orig/bin/sosetup
+++ securityonion-setup-20120912/bin/sosetup
@@ -22,7 +22,7 @@
 # Configure Security Onion.
 #
 # Version:
-# 20120910
+# 20121116
 #
 # Changelog:
 # 20111116 - Set OSSEC timezone to match OS timezone
@@ -64,6 +64,7 @@
 # http://code.google.com/p/security-onion/issues/detail?id=239
 # 
 # 20120910 - Numerous fixes for BDR
+# 20121116 - /etc/network/interfaces configuration by Matt Gregory
 
 
 #########################################
@@ -1012,3 +1013,252 @@ and more!\
 \
 http://securityonion.blogspot.com'
 zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
+
+#########################################
+# Configure network interfaces
+#########################################
+
+TEXT='Would you like to configure /etc/network/interfaces now?\
+\
+If you choose NO, you should manually configure your management and monitored interfaces\
+per the instructions on the Security Onion Wiki located at:\n\
+http://code.google.com/p/security-onion/wiki/NetworkConfiguration'
+YES='Yes, configure /etc/network/interfaces!'
+NO='No, Quit.'
+zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
+ANSWER="$?"
+if [ $ANSWER -eq 1 ]; then
+    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
+    exit
+else
+    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
+fi
+
+# Choose management interface
+TEXT='Which network interface should be the management interface?'
+MGMT_INTERFACE=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | 
+	awk '{print $1}' | cut -d\: -f1 | sort | zenity --list --column="Interface" --hide-header --title="$TITLE" --text="$TEXT" `
+if [ "$MGMT_INTERFACE" = "" ]; then
+	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
+	exit
+fi
+    
+# Choose static or DHCP configuration for management interface
+TEXT="Should $MGMT_INTERFACE use DHCP or static addressing (highly recommended)?"
+MGMT_CONFIG_TYPE=`zenity --list \
+        --title="$TITLE" \
+        --column="" static DHCP --hide-header --text="$TEXT"`
+
+# Define a function to validate IP addresses    
+ is_ip() {
+            case "$*" in
+                ""|*[!0-9.]*) return 1 ;;
+            esac
+            oldIFS=$IFS
+            IFS='.'
+            set -- $*
+            IFS=$oldIFS
+            [ $# -eq 4 ] || return 1
+            for ipseg in $1 $2 $3 $4
+              do
+              case $ipseg in
+                  *[!0-9]*) return 1 ;;
+              esac
+              [ $ipseg -le 255 ] || return 1
+            done
+         }
+
+if [ "$MGMT_CONFIG_TYPE" = "DHCP" ]; then
+	MANAGEMENT_TEXT="Configure the management interface $MGMT_INTERFACE using DHCP."
+else
+	# Obtain network settings for management interface 
+	# Enter static management IP address
+	VALID="no"
+        while [ $VALID = "no" ]; do
+		TEXT="Enter a static IP address for your management interface (e.g., 192.168.1.100):"
+		ADDRESS=`zenity --title="$TITLE" --text="$TEXT" --entry`
+		if [ "$ADDRESS" = "" ]; then
+			[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
+		        exit
+		fi
+	is_ip $ADDRESS && VALID="yes"
+	done
+          
+	# Enter gateway IP address
+	VALID="no"
+        while [ $VALID = "no" ]; do
+	TEXT="Enter your gateway's IP address (e.g., 192.168.1.1):"
+	GATEWAY=`zenity --title="$TITLE" --text="$TEXT" --entry`
+	if [ "$GATEWAY" = "" ]; then
+		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
+        	exit
+	fi
+	is_ip $GATEWAY && VALID="yes"
+	done
+          
+	# Enter subnet mask
+	VALID="no"
+        while [ $VALID = "no" ]; do
+	TEXT="Enter your network's subnet mask (e.g., 255.255.255.0):"
+	NETMASK=`zenity --title="$TITLE" --text="$TEXT" --entry`
+	if [ "$NETMASK" = "" ]; then
+		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
+	        exit
+	fi
+	is_ip $NETMASK && VALID="yes"
+	done
+        
+	# Enter network address
+	VALID="no"
+        while [ $VALID = "no" ]; do
+	TEXT="Enter your network address (e.g., 192.168.1.0):"
+	NETWORK=`zenity --title="$TITLE" --text="$TEXT" --entry`
+	if [ "$NETWORK" = "" ]; then
+		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
+	        exit
+	fi
+	is_ip $NETWORK && VALID="yes"
+	done
+        
+        # Enter broadcast address
+	VALID="no"
+        while [ $VALID = "no" ]; do
+        TEXT="Enter your network's broadcast address (e.g., 192.168.1.255):"
+          BROADCAST=`zenity --title="$TITLE" --text="$TEXT" --entry`
+          if [ "$BROADCAST" = "" ]; then
+            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
+            exit
+          fi
+	is_ip $BROADCAST && VALID="yes"
+	done
+        
+        # Enter DNS server address
+	VALID="no"
+        while [ $VALID = "no" ]; do
+        	TEXT="Enter one or more DNS server IP addresses, separated by spaces:\n"
+          	NAMESERVER=`zenity --title="$TITLE" --text="$TEXT" --entry`
+          	if [ "$NAMESERVER" = "" ]; then
+            		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
+            		exit
+          	fi
+		VALID="yes"
+		for i in `echo $NAMESERVER`; do
+			is_ip $i || VALID="no"
+		done
+	done
+          
+	MANAGEMENT_TEXT="Configure the management interface $MGMT_INTERFACE as follows: \n\
+          Set static IP address of $ADDRESS \n\
+          Set the gateway IP address to $GATEWAY \n\
+          Set the network mask to $NETMASK \n\
+          Set the network IP address to $NETWORK \n\
+          Set the broadcast IP address to $BROADCAST\n\
+          Set the DNS server(s) to $NAMESERVER"
+fi
+
+if [ $SENSOR -eq 1 ]; then
+    SENSOR_TEXT="Configure the monitored interface(s) $MON_INTERFACES for promiscuous mode"
+elif [ $SERVER -eq 1 ]; then
+    SENSOR_TEXT="Configure 0 interfaces for promiscuous mode"
+fi
+
+TEXT="We're about to do the following:\n\
+    - Backup existing network configuration to /etc/network/interfaces.bak \n\
+    - $SENSOR_TEXT \n\
+    - $MANAGEMENT_TEXT \n\
+    \n\
+    We're about to make changes to your system! \n\
+    \n\
+    Would you like to continue?"
+
+YES="Yes, proceed with the changes!"
+NO="No, do not make changes!"
+zenity --question --no-wrap --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO"
+ANSWER="$?"
+if [ $ANSWER -eq 1 ]; then
+	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No. Do not proceed."
+        exit
+else
+        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes to proceed with all changes."
+fi
+
+# Stop Network Manager, if it exists (i.e., running Ubuntu Desktop rather than Ubuntu Server), 
+# and prevent it from starting on reboot
+if [ -e "/etc/init.d/network-manager" ]; then
+  /etc/init.d/network-manager stop >> $LOG 2>&1
+  [ -f /etc/init/network-manager.conf ] && mv /etc/init/network-manager.conf /etc/init/network-manager.conf.DISABLED
+fi
+
+# Write new network interface configuration file
+FILE=/etc/network/interfaces
+
+# Backup existing network interface configuration first
+cp $FILE /etc/network/interfaces.bak
+
+cat << EOF > $FILE
+# This configuration was created by the Security Onion setup script.  The original network
+# interface configuration file was backed up to /etc/networking/interfaces.bak.
+   
+# This file describes the network interfaces available on your system
+# and how to activate them. For more information, see interfaces(5).
+
+# loopback network interface
+auto lo
+iface lo inet loopback
+
+EOF
+    
+if [ "$MGMT_CONFIG_TYPE" = "DHCP" ]; then
+
+cat << EOF >> $FILE
+# Management network interface
+auto $MGMT_INTERFACE
+iface $MGMT_INTERFACE inet dhcp
+  post-up for i in rx tx sg tso ufo gso gro lro; do ethtool -K \$IFACE \$i off; done
+
+EOF
+
+else
+
+cat << EOF >> $FILE
+# Management network interface
+auto $MGMT_INTERFACE
+iface $MGMT_INTERFACE inet static
+  address $ADDRESS
+  gateway $GATEWAY
+  netmask $NETMASK
+  network $NETWORK
+  broadcast $BROADCAST
+  dns-nameservers $NAMESERVER
+  post-up for i in rx tx sg tso ufo gso gro lro; do ethtool -K \$IFACE \$i off; done
+
+EOF
+
+fi
+
+# If single interface, we need to remove MGMT_INTERFACE from MON_INTERFACES
+MON_INTERFACES=`echo $MON_INTERFACES |sed "s|$MGMT_INTERFACE||g"`
+
+# Write monitored interface(s) configuration(s) if for Sensor or Standalone
+if [ $SENSOR -eq 1 ]; then
+        for INTERFACE in $MON_INTERFACES
+        do
+            	# Get max RX size for monitored interface
+            	MAX_RX=$(ethtool -g $INTERFACE | grep -m 1 RX | cut -d\: -f2 | awk '{sub(/^[ \t]+/, "")};1')
+    
+cat << EOF >> $FILE
+auto $INTERFACE
+iface $INTERFACE inet manual
+  up ifconfig \$IFACE -arp up
+  up ip link set \$IFACE promisc on
+  down ip link set \$IFACE promisc off
+  down ifconfig \$IFACE down
+  post-up ethtool -G \$IFACE rx $MAX_RX; for i in rx tx sg tso ufo gso gro lro; do ethtool -K \$IFACE \$i off; done
+
+EOF
+        done
+fi
+    
+# Restart networking
+/etc/init.d/networking restart >> $LOG 2>&1
+
